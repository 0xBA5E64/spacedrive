datasource db {
    provider = "sqlite"
    url      = "file:dev.db"
}

generator client {
    provider = "prisma-client-rust"
    output   = "../src/prisma.rs"
}

model Migration {
    id            Int      @id @default(autoincrement())
    name          String
    checksum      String   @unique
    steps_applied Int      @default(0)
    applied_at    DateTime @default(now())

    @@map("_migrations")
}

model Library {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique
    name         String
    remote_id    String?
    is_primary   Boolean  @default(true)
    encryption   Int      @default(0)
    date_created DateTime @default(now())
    timezone     String?
    spaces       Space[]

    @@map("libraries")
}

model LibraryStatistics {
    id                  Int      @id @default(autoincrement())
    date_captured       DateTime @default(now())
    library_id          Int      @unique
    total_file_count    Int      @default(0)
    total_bytes_used    String   @default("0")
    total_byte_capacity String   @default("0")
    total_unique_bytes  String   @default("0")

    @@map("library_statistics")
}

model Client {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique
    name         String
    platform     Int      @default(0)
    version      String?
    online       Boolean? @default(true)
    last_seen    DateTime @default(now())
    timezone     String?
    date_created DateTime @default(now())
    jobs         Job[]

    @@map("clients")
}

model Location {
    id                 Int      @id @default(autoincrement())
    name               String?
    local_path         String?
    total_capacity     Int?
    available_capacity Int?
    filesystem         String?
    disk_type          Int?
    is_removable       Boolean  @default(true)
    is_ejectable       Boolean  @default(true)
    is_root_filesystem Boolean  @default(true)
    is_online          Boolean  @default(true)
    date_created       DateTime @default(now())

    file_paths FilePath[]
    @@map("locations")
}

model File {
    id            Int      @id @default(autoincrement())
    id_hash       String   @unique
    name          String
    extension     String?
    checksum      String?
    size_in_bytes String
    encryption    Int      @default(0)
    date_created  DateTime @default(now())
    date_modified DateTime @default(now())
    date_indexed  DateTime @default(now())
    ipfs_id       String?

    file_tags   TagOnFile[]
    file_labels LabelOnFile[]
    file_paths  FilePath[]
    comments    Comment[]
    @@map("files")
}

model FilePath {
    id                Int        @id @default(autoincrement())
    is_dir            Boolean    @default(false)
    materialized_path String
    file_id           Int?
    file              File?      @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    parent_id         Int?
    parent            FilePath?  @relation("directory_file_paths", fields: [parent_id], references: [id])
    children          FilePath[] @relation("directory_file_paths")
    location_id       Int
    location          Location?  @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    date_indexed      DateTime   @default(now())
    permissions       String?

    @@unique([location_id, materialized_path, file_id])
    @@map("file_paths")
}

model Tag {
    id              Int      @id @default(autoincrement())
    name            String?
    encryption      Int?     @default(0)
    total_files     Int?     @default(0)
    redundancy_goal Int?     @default(1)
    date_created    DateTime @default(now())
    date_modified   DateTime @default(now())

    tag_files TagOnFile[]
    @@map("tags")
}

model TagOnFile {
    date_created DateTime @default(now())

    tag_id Int
    tag    Tag @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    file_id Int
    file    File @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([tag_id, file_id])
    @@map("tags_on_files")
}

model Label {
    id            Int      @id @default(autoincrement())
    name          String?
    date_created  DateTime @default(now())
    date_modified DateTime @default(now())

    label_files LabelOnFile[]
    @@map("labels")
}

model LabelOnFile {
    date_created DateTime @default(now())

    label_id Int
    label    Label @relation(fields: [label_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    file_id Int
    file    File @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([label_id, file_id])
    @@map("label_on_files")
}

model Job {
    id        Int @id @default(autoincrement())
    client_id Int
    action    Int
    status    Int @default(0)

    task_count           Int      @default(1)
    completed_task_count Int      @default(0)
    date_created         DateTime @default(now())
    date_modified        DateTime @default(now())
    clients              Client   @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("jobs")
}

model Space {
    id            Int      @id @default(autoincrement())
    name          String
    encryption    Int?     @default(0) // remove
    date_created  DateTime @default(now())
    date_modified DateTime @default(now())
    Library       Library? @relation(fields: [libraryId], references: [id])
    libraryId     Int?

    @@map("spaces")
}

model Album {
    id        Int     @id @default(autoincrement())
    name      String
    is_hidden Boolean @default(false)

    date_created  DateTime @default(now())
    date_modified DateTime @default(now())

    @@map("albums")
}

model Comment {
    id            Int      @id @default(autoincrement())
    content       String
    date_created  DateTime @default(now())
    date_modified DateTime @default(now())
    file_id       Int?
    file          File?    @relation(fields: [file_id], references: [id])

    @@map("comments")
}
