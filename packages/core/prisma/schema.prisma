datasource db {
    provider = "sqlite"
    url      = "file:dev.db"
}

generator client {
    provider = "prisma-client-rust"
    output   = "../src/prisma.rs"
}

model Migration {
    id            Int      @id @default(autoincrement())
    name          String
    checksum      String   @unique
    steps_applied Int      @default(0)
    applied_at    DateTime @default(now())

    @@map("_migrations")
}

model Library {
    id                  Int      @id @default(autoincrement())
    uuid                String
    name                String
    remote_id           String?
    is_primary          Boolean  @default(true)
    encryption          Int      @default(0)
    total_file_count    Int      @default(0)
    total_bytes_used    String   @default("0")
    total_byte_capacity String   @default("0")
    total_unique_bytes  String   @default("0")
    date_created        DateTime @default(now())
    timezone            String?
    spaces              Space[]

    @@map("libraries")
}

model Client {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique
    name         String
    platform     Int      @default(0)
    version      String?
    online       Boolean? @default(true)
    last_seen    DateTime @default(now())
    timezone     String?
    date_created DateTime @default(now())
    jobs         Job[]

    @@map("clients")
}

model Location {
    id                 Int      @id @default(autoincrement())
    name               String?
    path               String?
    total_capacity     Int?
    available_capacity Int?
    is_removable       Boolean  @default(true)
    is_ejectable       Boolean  @default(true)
    is_root_filesystem Boolean  @default(true)
    is_online          Boolean  @default(true)
    date_created       DateTime @default(now())
    files              File[]

    @@map("locations")
}

model File {
    id                   Int      @id @default(autoincrement())
    is_dir               Boolean  @default(false)
    location_id          Int
    materialized_path    String
    name                 String
    extension            String?
    path_integrity_hash  String   @unique // combo of location_id, materialized_path, name, extension
    quick_integrity_hash String? // 100 * 100 byte samples
    full_integrity_hash  String? // full byte to byte hash
    size_in_bytes        String
    encryption           Int      @default(0)
    date_created         DateTime @default(now())
    date_modified        DateTime @default(now())
    date_indexed         DateTime @default(now())
    ipfs_id              String?

    location Location? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    parent    File?  @relation("directory_files", fields: [parent_id], references: [id])
    parent_id Int?
    children  File[] @relation("directory_files")

    file_tags TagOnFile[]
    @@map("files")
}

model Tag {
    id              Int      @id @default(autoincrement())
    name            String?
    encryption      Int?     @default(0)
    total_files     Int?     @default(0)
    redundancy_goal Int?     @default(1)
    date_created    DateTime @default(now())
    date_modified   DateTime @default(now())

    tag_files TagOnFile[]

    @@map("tags")
}

model TagOnFile {
    date_created DateTime @default(now())

    tag_id Int
    tag    Tag @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    file_id Int
    file    File @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([tag_id, file_id])
    @@map("tags_on_files")
}

model Job {
    id                   Int      @id @default(autoincrement())
    client_id            Int
    action               Int
    status               Int      @default(0)
    percentage_complete  Int      @default(0)
    task_count           Int      @default(1)
    completed_task_count Int      @default(0)
    date_created         DateTime @default(now())
    date_modified        DateTime @default(now())
    clients              Client   @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("jobs")
}

model Space {
    id            Int      @id @default(autoincrement())
    name          String
    encryption    Int?     @default(0)
    date_created  DateTime @default(now())
    date_modified DateTime @default(now())

    Library   Library? @relation(fields: [libraryId], references: [id])
    libraryId Int?
    @@map("spaces")
}
